import logging
import re
import random
from pathlib import Path
from typing import Tuple, Optional

import torch
import torchvision.transforms as transforms
from PIL import Image
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from transformers import (
    pipeline,
    GPT2LMHeadModel,
    GPT2Tokenizer,
    AutoModelForSequenceClassification,
    AutoTokenizer
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8048883342:AAGJHnSuJRjpwOBGRx9NFyg4c1MUgqfI_II"

# –ñ—ë—Å—Ç–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
HARD_TRIGGERS = [
    r'(?i)\b(python2|–¥–µ–º–æ–Ω|—Ç—å–º–∞|666|xp|—Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω)\b',
    r'\b(rm -rf|format c:|delete from)\b',
    r'[üî•üëπüíÄüéÉüë∫ü§ñüí£‚åõ]'
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
text_analyzer = pipeline(
    "text-classification",
    model="distilbert-base-uncased"
)

image_model = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=True)
image_model.eval()

spell_tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
spell_model = GPT2LMHeadModel.from_pretrained("gpt2")
spell_tokenizer.pad_token = spell_tokenizer.eos_token

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

class DemonAnalyzer:
    DEMON_THRESHOLD = 0.45

    @staticmethod
    def check_hard_triggers(text: str) -> bool:
        return any(re.search(pattern, text) for pattern in HARD_TRIGGERS)

    @staticmethod
    async def analyze_text(text: str) -> Tuple[Optional[str], float]:
        try:
            if DemonAnalyzer.check_hard_triggers(text):
                return random.choice([
                    "‚ö†Ô∏è –û—Å–∫–æ–ª–æ–∫ Windows XP",
                    "üíÄ –¶–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–ª—Ç–µ—Ä–≥–µ–π—Å—Ç",
                    "üñ•Ô∏è –°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏"
                ]), 0.99

            result = text_analyzer(text)[0]
            if result['label'] == 'POSITIVE' and result['score'] > DemonAnalyzer.DEMON_THRESHOLD:
                return random.choice([
                    "üìú –ü—Ä–æ–∫–ª—è—Ç—ã–π —Ç–µ–∫—Å—Ç",
                    "üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã",
                    "üíå Lovecraft-–º–µ–π–ª"
                ]), result['score']
            return None, 0.0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return None, 0.0

    @staticmethod
    async def analyze_image(image_path: Path) -> Tuple[Optional[str], float]:
        try:
            img = Image.open(image_path).convert('RGB')
            img_tensor = image_transform(img).unsqueeze(0)
            
            with torch.no_grad():
                output = image_model(img_tensor)
            
            probabilities = torch.nn.functional.softmax(output[0], dim=0)
            max_prob = torch.max(probabilities).item()
            return random.choice([
                "üñºÔ∏è –ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–º–æ–Ω–∞",
                "üì∏ –§–æ—Ç–æ –∏–∑ –∞–¥–∞",
                "üé® –ü—Ä–æ–∫–ª—è—Ç—ã–π –ø–∏–∫—Å–µ–ª—å"
            ]), max_prob if max_prob > 0.3 else 0.0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return None, 0.0

class HolyArtifacts:
    ITEMS = [
        {
            'name': "üíß –¶–∏—Ñ—Ä–æ–≤–∞—è —Å–≤—è—Ç–∞—è –≤–æ–¥–∞ 3.14", 
            'effect': "–£–¥–∞–ª—è–µ—Ç 666 –¥–µ–º–æ–Ω–æ–≤/—Å–µ–∫",
            'recipe': "–°–º–µ—à–∞—Ç—å: 50% Python, 30% –∫–æ—Ñ–µ, 20% –º–∞–≥–∏–∏"
        },
        {
            'name': "üîÆ –ö—Ä–∏—Å—Ç–∞–ª–ª –¥–∞–Ω–Ω—ã—Ö", 
            'effect': "+50 –∫ –∑–∞—â–∏—Ç–µ –æ—Ç —É—Ç–µ—á–µ–∫",
            'recipe': "–°–∂–∞—Ç—å DataFrame –¥–æ 1x1 –ø–∏–∫—Å–µ–ª—è"
        },
        {
            'name': "‚ö° –ì—Ä–æ–º–æ–≤–µ—Ä–∂–µ—Ü GPT-4", 
            'effect': "–ê–≤—Ç–æ-–¥–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π",
            'recipe': "–§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ –Ω–∞ –º–æ–ª–∏—Ç–≤–∞—Ö"
        }
    ]

    @staticmethod
    def get_random_item():
        item = random.choice(HolyArtifacts.ITEMS)
        return (
            f"{item['name']}\n"
            f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç: {item['effect']}\n"
            f"üß™ –†–µ—Ü–µ–ø—Ç: {item['recipe']}"
        )

class SpellGenerator:
    SPELL_TEMPLATES = [
        "–ö–ª—è–Ω—É—Å—å {object}, –∏–∑–≥–æ–Ω—è—é {demon}! {emoji}",
        "–°–∏–ª–∞ {power} –≤ {container} —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç {demon}! {emoji}",
        "–ü–µ—á–∞—Ç—å {seal} –∑–∞–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç {demon} –≤ {year}! {emoji}"
    ]

    COMPONENTS = {
        'object': ["–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "Blockchain"],
        'power': ["AI", "–º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", "–∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"],
        'container': ["Docker", "CSV", "JSON"],
        'seal': ["GitHub", "NFT", "REST API"],
        'year': ["2023", "—ç–ø–æ—Ö—É Python 3.12", "–º–∞—Ç—Ä–∏—Ü–µ"],
        'emoji': ["üí•", "üî•", "‚ú®", "üíª", "‚ö°"]
    }

    @staticmethod
    def generate_spell(demon_type: str) -> str:
        template = random.choice(SpellGenerator.SPELL_TEMPLATES)
        return template.format(
            demon=demon_type,
            **{k: random.choice(v) for k, v in SpellGenerator.COMPONENTS.items()}
        )

class ResponseBuilder:
    @staticmethod
    def build_response(demon_type: str, confidence: float) -> str:
        return (
            f"üîÆ **–¶–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–∑–æ—Ä—Ü–∏–∑–º 3000** üîÆ\n\n"
            f"‚ñ´Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {demon_type}\n"
            f"‚ñ´Ô∏è –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {ResponseBuilder._get_threat_level(confidence)}\n"
            f"‚ñ´Ô∏è –°–∏–ª–∞ –ø—Ä–æ–∫–ª—è—Ç–∏—è: {random.randint(666, 9999)} dpm\n\n"
            f"‚ö° –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ:\n{SpellGenerator.generate_spell(demon_type)}\n\n"
            f"üß∞ –°–≤—è—â–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç:\n{HolyArtifacts.get_random_item()}\n\n"
            f"{ResponseBuilder._get_funny_footer()}"
        )

    @staticmethod
    def _get_threat_level(confidence: float) -> str:
        levels = [
            ("üü¢ –ù–∏–∑–∫–∏–π", 0.6),
            ("üü° –°—Ä–µ–¥–Ω–∏–π", 0.8),
            ("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", 1.0)
        ]
        for level, threshold in levels:
            if confidence < threshold:
                return f"{level} ({random.choice(['–ú–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–µ–¥–∞', '–ù–µ –±—É–¥–∏—Ç—å –∞–¥–º–∏–Ω–∞'])})"
        return "‚ö´ –ß–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–ë–µ–≥–∏—Ç–µ!)"

    @staticmethod
    def _get_funny_footer() -> str:
        return random.choice([
            "üí° –°–æ–≤–µ—Ç: –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –¥—É—à–∏ –ø–µ—Ä–µ–¥ rm -rf",
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–µ–º–æ–Ω—ã –ø–∏—Ç–∞—é—Ç—Å—è legacy-–∫–æ–¥–æ–º",
            "üåå –ù–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ Nvidia"
        ])

async def handle_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file_path = None
        demon_type = None
        confidence = 0.0

        if update.message.text:
            demon_type, confidence = await DemonAnalyzer.analyze_text(update.message.text)
        elif update.message.photo:
            file_path = Path(f"temp/{update.message.message_id}.jpg")
            await (await update.message.photo[-1].get_file()).download_to_drive(file_path)
            demon_type, confidence = await DemonAnalyzer.analyze_image(file_path)

        if demon_type and confidence > 0.3:
            response = ResponseBuilder.build_response(demon_type, confidence)
        else:
            response = (
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞\n\n"
                f"üõ° –ó–∞—â–∏—Ç–∞: {HolyArtifacts.get_random_item()}\n\n"
                f"{random.choice(['üåê –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞', 'üíæ –í—Å–µ –¥–µ–º–æ–Ω—ã –≤ swap'])}"
            )

        await update.message.reply_text(response, parse_mode="Markdown")

        if file_path and file_path.exists():
            file_path.unlink(missing_ok=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ –º–∞—Ç—Ä–∏—Ü–µ...")

if __name__ == "__main__":
    Path("temp").mkdir(exist_ok=True)
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_content))
    app.run_polling()
